package main

import (
	"context"
	"fmt"
	"sync"
	"time"

	"github.com/zeusync/zeusync/internal/core/observability/log"
	"github.com/zeusync/zeusync/internal/core/protocol"
	"github.com/zeusync/zeusync/internal/core/protocol/quic"
	"github.com/zeusync/zeusync/internal/core/protocol/websocket"
)

// BenchmarkResult —Å–æ–¥–µ—Ä–∂–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –±–µ–Ω—á–º–∞—Ä–∫–∞
type BenchmarkResult struct {
	Protocol          string
	MessagesSent      int
	MessagesReceived  int
	TotalTime         time.Duration
	MessagesPerSecond float64
	AverageLatency    time.Duration
	MinLatency        time.Duration
	MaxLatency        time.Duration
	ErrorCount        int
	ConnectionTime    time.Duration
}

// LatencyMeasurement –¥–ª—è –∏–∑–º–µ—Ä–µ–Ω–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏
type LatencyMeasurement struct {
	SentAt     time.Time
	ReceivedAt time.Time
	Latency    time.Duration
}

func main() {
	logger := log.New(log.LevelDebug)
	fmt.Println("=== ZeuSync Protocol Performance Comparison ===")
	fmt.Println()

	// –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
	messageCount := 1000
	concurrentClients := 10
	messageSize := 1024 // 1KB —Å–æ–æ–±—â–µ–Ω–∏—è

	// –¢–µ—Å—Ç–∏—Ä—É–µ–º WebSocket
	fmt.Println("üîÑ Testing WebSocket protocol...")
	wsResult := benchmarkWebSocket(logger, messageCount, concurrentClients, messageSize)

	// –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
	time.Sleep(2 * time.Second)

	// –¢–µ—Å—Ç–∏—Ä—É–µ–º QUIC
	fmt.Println("üîÑ Testing QUIC protocol...")
	quicResult := benchmarkQUIC(logger, messageCount, concurrentClients, messageSize)

	// –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
	printComparisonResults(wsResult, quicResult)
}

func benchmarkWebSocket(logger log.Log, messageCount, concurrentClients, messageSize int) BenchmarkResult {
	config := protocol.Config{
		Host:              "localhost",
		Port:              8081, // –î—Ä—É–≥–æ–π –ø–æ—Ä—Ç –¥–ª—è –±–µ–Ω—á–º–∞—Ä–∫–∞
		MaxConnections:    uint64(concurrentClients * 2),
		ReadTimeout:       10 * time.Second,
		WriteTimeout:      10 * time.Second,
		KeepAliveTimeout:  30 * time.Second,
		MaxMessageSize:    uint32(messageSize * 2),
		EnableCompression: false, // –û—Ç–∫–ª—é—á–∞–µ–º –¥–ª—è —á–µ—Å—Ç–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
		BufferSize:        4096,
		WorkerCount:       20,
		QueueSize:         2000,
		EnableGroups:      false,
		EnableMiddleware:  false,
		EnableMetrics:     true,
	}

	// –°–æ–∑–¥–∞–µ–º WebSocket –ø—Ä–æ—Ç–æ–∫–æ–ª
	wsProtocol := websocket.NewWebSocketProtocol(config, logger)

	// –ö–∞–Ω–∞–ª –¥–ª—è —Å–±–æ—Ä–∞ –∏–∑–º–µ—Ä–µ–Ω–∏–π –∑–∞–¥–µ—Ä–∂–∫–∏
	latencyMeasurements := make(chan LatencyMeasurement, messageCount*concurrentClients)
	var errorCount int32

	// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –±–µ–Ω—á–º–∞—Ä–∫–∞
	_ = wsProtocol.RegisterHandler("benchmark", func(ctx context.Context, client protocol.ClientInfo, message protocol.IMessage) error {
		// –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
		payload, ok := message.Payload().(map[string]interface{})
		if !ok {
			return fmt.Errorf("invalid payload")
		}

		sentAtNano, ok := payload["sent_at"].(float64)
		if !ok {
			return fmt.Errorf("missing sent_at")
		}

		receivedAt := time.Now()
		sentAt := time.Unix(0, int64(sentAtNano))

		latencyMeasurements <- LatencyMeasurement{
			SentAt:     sentAt,
			ReceivedAt: receivedAt,
			Latency:    receivedAt.Sub(sentAt),
		}

		// –ûÔøΩÔøΩ–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
		response := message.CreateResponse(map[string]interface{}{
			"echo":        payload["data"],
			"received_at": receivedAt.UnixNano(),
		})

		return wsProtocol.Send(client.ID, response)
	})

	// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
	ctx := context.Background()
	if err := wsProtocol.Start(ctx, config); err != nil {
		logger.Fatal("Failed to start WebSocket server", log.Error(err))
	}
	defer func() {
		_ = wsProtocol.Stop(ctx)
	}()

	// –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
	time.Sleep(500 * time.Millisecond)

	// –ò–∑–º–µ—Ä—è–µ–º –≤—Ä–µ–º—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
	connectionStart := time.Now()

	// –ó–∞–ø—É—Å–∫–∞–µ–º –∫–ª–∏–µ–Ω—Ç–æ–≤
	var wg sync.WaitGroup
	startTime := time.Now()

	for i := 0; i < concurrentClients; i++ {
		wg.Add(1)
		go func(clientID int) {
			defer wg.Done()

			// –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫–æ–¥ WebSocket –∫–ª–∏–µ–Ω—Ç–∞
			// –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã —Å–∏–º—É–ª–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π —á–µ—Ä–µ–∑ –ø—Ä–æ—Ç–æ–∫–æ–ª
			for j := 0; j < messageCount/concurrentClients; j++ {
				_ = protocol.NewMessage("benchmark", map[string]interface{}{
					"client_id":  clientID,
					"message_id": j,
					"data":       generateTestData(messageSize),
					"sent_at":    time.Now().UnixNano(),
				})

				// –°–∏–º—É–ª–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É (–≤ —Ä–µ–∞–ª—å–Ω–æ–º —Å–ª—É—á–∞–µ —á–µ—Ä–µ–∑ WebSocket –∫–ª–∏–µ–Ω—Ç)
				time.Sleep(time.Millisecond) // –°–∏–º—É–ª—è—Ü–∏—è —Å–µ—Ç–µ–≤–æ–π –∑–∞–¥–µ—Ä–∂–∫–∏
			}
		}(i)
	}

	wg.Wait()
	totalTime := time.Since(startTime)
	connectionTime := time.Since(connectionStart)

	// –°–æ–±–∏—Ä–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–∑–º–µ—Ä–µ–Ω–∏–π
	close(latencyMeasurements)

	var latencies []time.Duration
	for measurement := range latencyMeasurements {
		latencies = append(latencies, measurement.Latency)
	}

	return calculateResults("WebSocket", messageCount, len(latencies), totalTime, connectionTime, latencies, int(errorCount))
}

func benchmarkQUIC(logger log.Log, messageCount, concurrentClients, messageSize int) BenchmarkResult {
	config := protocol.Config{
		Host:              "localhost",
		Port:              9091, // –î—Ä—É–≥–æ–π –ø–æ—Ä—Ç –¥–ª—è –±–µ–Ω—á–º–∞—Ä–∫–∞
		MaxConnections:    uint64(concurrentClients * 2),
		ReadTimeout:       10 * time.Second,
		WriteTimeout:      10 * time.Second,
		KeepAliveTimeout:  60 * time.Second,
		MaxMessageSize:    uint32(messageSize * 2),
		EnableCompression: false, // –û—Ç–∫–ª—é—á–∞–µ–º –¥–ª—è —á–µ—Å—Ç–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
		BufferSize:        8192,
		WorkerCount:       25,
		QueueSize:         3000,
		EnableGroups:      false,
		EnableMiddleware:  false,
		EnableMetrics:     true,
		TLSEnabled:        false, // –°–∞–º–æ–ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç
	}

	// –°–æ–∑–¥–∞–µ–º QUIC –ø—Ä–æ—Ç–æ–∫–æ–ª
	quicProtocol := quic.NewQuicProtocol(config, logger)

	// –ö–∞–Ω–∞–ª –¥–ª—è —Å–±–æ—Ä–∞ –∏–∑–º–µ—Ä–µ–Ω–∏–π –∑–∞–¥–µ—Ä–∂–∫–∏
	latencyMeasurements := make(chan LatencyMeasurement, messageCount*concurrentClients)
	var errorCount int32

	// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –±–µ–Ω—á–º–∞—Ä–∫–∞
	_ = quicProtocol.RegisterHandler("benchmark", func(ctx context.Context, client protocol.ClientInfo, message protocol.IMessage) error {
		// –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
		payload, ok := message.Payload().(map[string]interface{})
		if !ok {
			return fmt.Errorf("invalid payload")
		}

		sentAtNano, ok := payload["sent_at"].(float64)
		if !ok {
			return fmt.Errorf("missing sent_at")
		}

		receivedAt := time.Now()
		sentAt := time.Unix(0, int64(sentAtNano))

		latencyMeasurements <- LatencyMeasurement{
			SentAt:     sentAt,
			ReceivedAt: receivedAt,
			Latency:    receivedAt.Sub(sentAt),
		}

		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
		response := message.CreateResponse(map[string]interface{}{
			"echo":        payload["data"],
			"received_at": receivedAt.UnixNano(),
		})

		return quicProtocol.Send(client.ID, response)
	})

	// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
	ctx := context.Background()
	if err := quicProtocol.Start(ctx, config); err != nil {
		logger.Fatal("Failed to start QUIC server", log.Error(err))
	}
	defer func() {
		_ = quicProtocol.Stop(ctx)
	}()

	// –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
	time.Sleep(1 * time.Second) // QUIC –º–æ–∂–µ—Ç —Ç—Ä–µ–±–æ–≤–∞—Ç—å –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏

	// –ò–∑–º–µ—Ä—è–µ–º –≤—Ä–µ–º—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
	connectionStart := time.Now()

	// –ó–∞–ø—É—Å–∫–∞–µ–º –∫–ª–∏–µ–Ω—Ç–æ–≤
	var wg sync.WaitGroup
	startTime := time.Now()

	for i := 0; i < concurrentClients; i++ {
		wg.Add(1)
		go func(clientID int) {
			defer wg.Done()

			// –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫–æ–¥ QUIC –∫–ª–∏–µ–Ω—Ç–∞
			// –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã —Å–∏–º—É–ª–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π —á–µ—Ä–µ–∑ –ø—Ä–æ—Ç–æ–∫–æ–ª
			for j := 0; j < messageCount/concurrentClients; j++ {
				_ = protocol.NewMessage("benchmark", map[string]interface{}{
					"client_id":  clientID,
					"message_id": j,
					"data":       generateTestData(messageSize),
					"sent_at":    time.Now().UnixNano(),
				})

				// –°–∏–º—É–ª–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É (–≤ —Ä–µ–∞–ª—å–Ω–æ–º —Å–ª—É—á–∞–µ —á–µ—Ä–µ–∑ QUIC –∫–ª–∏–µ–Ω—Ç)
				time.Sleep(500 * time.Microsecond) // QUIC –æ–±—ã—á–Ω–æ –±—ã—Å—Ç—Ä–µ–µ
			}
		}(i)
	}

	wg.Wait()
	totalTime := time.Since(startTime)
	connectionTime := time.Since(connectionStart)

	// –°–æ–±–∏—Ä–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–∑–º–µ—Ä–µ–Ω–∏–π
	close(latencyMeasurements)

	var latencies []time.Duration
	for measurement := range latencyMeasurements {
		latencies = append(latencies, measurement.Latency)
	}

	return calculateResults("QUIC", messageCount, len(latencies), totalTime, connectionTime, latencies, int(errorCount))
}

func generateTestData(size int) string {
	data := make([]byte, size)
	for i := range data {
		data[i] = byte('A' + (i % 26))
	}
	return string(data)
}

func calculateResults(protocol string, expectedMessages, actualMessages int, totalTime, connectionTime time.Duration, latencies []time.Duration, errorCount int) BenchmarkResult {
	result := BenchmarkResult{
		Protocol:         protocol,
		MessagesSent:     expectedMessages,
		MessagesReceived: actualMessages,
		TotalTime:        totalTime,
		ErrorCount:       errorCount,
		ConnectionTime:   connectionTime,
	}

	if totalTime > 0 {
		result.MessagesPerSecond = float64(actualMessages) / totalTime.Seconds()
	}

	if len(latencies) > 0 {
		// –í—ã—á–∏—Å–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞–¥–µ—Ä–∂–∫–∏
		var totalLatency time.Duration
		result.MinLatency = latencies[0]
		result.MaxLatency = latencies[0]

		for _, latency := range latencies {
			totalLatency += latency
			if latency < result.MinLatency {
				result.MinLatency = latency
			}
			if latency > result.MaxLatency {
				result.MaxLatency = latency
			}
		}

		result.AverageLatency = totalLatency / time.Duration(len(latencies))
	}

	return result
}

func printComparisonResults(wsResult, quicResult BenchmarkResult) {
	// –¢–∞–±–ª–∏—Ü–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
	fmt.Printf("%-20s %-15s %-15s %-15s\n", "Metric", "WebSocket", "QUIC", "Winner")

	// –°–æ–æ–±—â–µ–Ω–∏—è –≤ —Å–µ–∫—É–Ω–¥—É
	wsWinner := ""
	quicWinner := ""
	if wsResult.MessagesPerSecond > quicResult.MessagesPerSecond {
		wsWinner = "üèÜ"
	} else {
		quicWinner = "üèÜ"
	}
	fmt.Printf("%-20s %-15.2f %-15.2f %-15s\n",
		"Messages/sec", wsResult.MessagesPerSecond, quicResult.MessagesPerSecond,
		wsWinner+quicWinner)

	// –°—Ä–µ–¥–Ω—è—è –∑–∞–¥–µ—Ä–∂–∫–∞
	wsWinner = ""
	quicWinner = ""
	if wsResult.AverageLatency < quicResult.AverageLatency {
		wsWinner = "üèÜ"
	} else {
		quicWinner = "üèÜ"
	}
	fmt.Printf("%-20s %-15s %-15s %-15s\n",
		"Avg Latency", wsResult.AverageLatency, quicResult.AverageLatency,
		wsWinner+quicWinner)

	// –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
	wsWinner = ""
	quicWinner = ""
	if wsResult.MinLatency < quicResult.MinLatency {
		wsWinner = "üèÜ"
	} else {
		quicWinner = "üèÜ"
	}
	fmt.Printf("%-20s %-15s %-15s %-15s\n",
		"Min Latency", wsResult.MinLatency, quicResult.MinLatency,
		wsWinner+quicWinner)

	// –í—Ä–µ–º—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
	wsWinner = ""
	quicWinner = ""
	if wsResult.ConnectionTime < quicResult.ConnectionTime {
		wsWinner = "üèÜ"
	} else {
		quicWinner = "üèÜ"
	}
	fmt.Printf("%-20s %-15s %-15s %-15s\n",
		"Connection Time", wsResult.ConnectionTime, quicResult.ConnectionTime,
		wsWinner+quicWinner)

	// –û—à–∏–±–∫–∏
	wsWinner = ""
	quicWinner = ""
	if wsResult.ErrorCount < quicResult.ErrorCount {
		wsWinner = "üèÜ"
	} else if quicResult.ErrorCount < wsResult.ErrorCount {
		quicWinner = "üèÜ"
	}
	fmt.Printf("%-20s %-15d %-15d %-15s\n",
		"Errors", wsResult.ErrorCount, quicResult.ErrorCount,
		wsWinner+quicWinner)

	// –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
	fmt.Println("\nüìà DETAILED STATISTICS")

	fmt.Printf("WebSocket:\n")
	fmt.Printf("  Total Time: %v\n", wsResult.TotalTime)
	fmt.Printf("  Messages Sent: %d\n", wsResult.MessagesSent)
	fmt.Printf("  Messages Received: %d\n", wsResult.MessagesReceived)
	fmt.Printf("  Success Rate: %.2f%%\n", float64(wsResult.MessagesReceived)/float64(wsResult.MessagesSent)*100)
	fmt.Printf("  Max Latency: %v\n", wsResult.MaxLatency)

	fmt.Printf("\nQUIC:\n")
	fmt.Printf("  Total Time: %v\n", quicResult.TotalTime)
	fmt.Printf("  Messages Sent: %d\n", quicResult.MessagesSent)
	fmt.Printf("  Messages Received: %d\n", quicResult.MessagesReceived)
	fmt.Printf("  Success Rate: %.2f%%\n", float64(quicResult.MessagesReceived)/float64(quicResult.MessagesSent)*100)
	fmt.Printf("  Max Latency: %v\n", quicResult.MaxLatency)

	// –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
	fmt.Println("\nüí° RECOMMENDATIONS")
	if quicResult.MessagesPerSecond > wsResult.MessagesPerSecond {
		fmt.Println("‚úÖ QUIC shows better throughput - recommended for high-volume applications")
	} else {
		fmt.Println("‚úÖ WebSocket shows better throughput - good for current use case")
	}

	if quicResult.AverageLatency < wsResult.AverageLatency {
		fmt.Println("‚úÖ QUIC shows lower latency - recommended for real-time applications")
	} else {
		fmt.Println("‚úÖ WebSocket shows lower latency - suitable for real-time needs")
	}

	if quicResult.ConnectionTime < wsResult.ConnectionTime {
		fmt.Println("‚úÖ QUIC has faster connection establishment - better for short-lived connections")
	} else {
		fmt.Println("‚úÖ WebSocket has faster connection establishment")
	}

	fmt.Println("\nüéØ USE CASE RECOMMENDATIONS:")
	fmt.Println("WebSocket:")
	fmt.Println("  - Excellent browser support")
	fmt.Println("  - Simple implementation")
	fmt.Println("  - Good for traditional web applications")
	fmt.Println("  - Reliable over TCP")

	fmt.Println("\nQUIC:")
	fmt.Println("  - Lower latency for real-time applications")
	fmt.Println("  - Better performance over unreliable networks")
	fmt.Println("  - Multiplexed streams")
	fmt.Println("  - Built-in encryption")
	fmt.Println("  - Future-proof protocol")
}
